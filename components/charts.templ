package components

import "time"
import "fmt"

templ GradeCountsChart(gradeLabels []string, datasets map[string][]int, viewType string, dateStr string) {
    <div id="grade-counts-chart" class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
        <div class="flex justify-between items-center mb-4">
            <span class="text-gray-800 dark:text-white font-bold">Boulder Counts</span>
            <div class="flex space-x-2">
                <button
                    class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                    hx-get={"/charts/grade-counts?view=all&date=" + dateStr}
                    hx-target="#grade-counts-chart"
                    hx-swap="outerHTML"
                >All</button>
                <button
                    class="px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                    hx-get={ "/charts/grade-counts?view=weekly&date=" + getPreviousWeek(dateStr) }
                    hx-target="#grade-counts-chart"
                    hx-swap="outerHTML"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                </button>
                <button
                    class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                    hx-get={ "/charts/grade-counts?view=weekly&date=" + dateStr }
                    hx-target="#grade-counts-chart"
                    hx-swap="outerHTML"
                >Week { getWeekNumber(dateStr) }</button>
                <button
                    class="px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                    hx-get={ "/charts/grade-counts?view=weekly&date=" + getNextWeek(dateStr) }
                    hx-target="#grade-counts-chart"
                    hx-swap="outerHTML"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </div>
        <div class="max-h-64">
            <canvas id="gradeCountsChartCanvas" data-labels={ templ.JSONString(gradeLabels) } data-datasets={ templ.JSONString(datasets) } data-view-type={ viewType } data-date={ dateStr }></canvas>
        </div>
    </div>
    <script>
        (function() {
            const canvas = document.getElementById('gradeCountsChartCanvas');
            const ctx = canvas.getContext('2d');
            const viewType = canvas.dataset.viewType;
            const dateStr = canvas.dataset.date;
            const labels = JSON.parse(canvas.dataset.labels);
            const datasets = JSON.parse(canvas.dataset.datasets);

            const isDarkMode = document.documentElement.classList.contains('dark');

            const colors = {
                Topped: { light: 'rgba(54, 162, 235, 0.8)', dark: 'rgba(54, 162, 235, 0.5)' },
                Untopped: { light: 'rgba(255, 99, 132, 0.8)', dark: 'rgba(255, 99, 132, 0.5)' },
                Flashed: { light: 'rgba(255, 165, 0, 0.8)', dark: 'rgba(255, 165, 0, 0.5)' },
                New: { light: 'rgba(76, 175, 80, 0.8)', dark: 'rgba(76, 175, 80, 0.5)' }
            };

            const chartDatasets = Object.keys(datasets).map(key => ({
                label: key,
                data: datasets[key],
                backgroundColor: isDarkMode ? colors[key].dark : colors[key].light,
                borderColor: isDarkMode ? colors[key].dark.replace('0.5', '1') : colors[key].light.replace('0.8', '1'),
                borderWidth: 1
            }));

            window.gradeCountsChart = new Chart(ctx, {
                type: 'bar',    
                data: {
                    labels: labels,
                    datasets: chartDatasets
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: false,
                                text: 'Count',
                                color: isDarkMode ? '#fff' : '#333'
                            },
                            ticks: {
                                color: isDarkMode ? '#fff' : '#333'
                            },
                            grid: {
                                color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            title: {
                                display: false,
                                text: 'Grade',
                                color: isDarkMode ? '#fff' : '#333'
                            },
                            ticks: {
                                color: isDarkMode ? '#fff' : '#333'
                            },
                            grid: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
							labels: {
								color: isDarkMode ? '#fff' : '#333'
							},
							position: 'bottom'
                        },
                        title: {
                            display: false
                        }
                    }
                }
            });
        })();
    </script>
}

func getPreviousWeek(dateStr string) string {
    date, _ := time.Parse("2006-01-02", dateStr)
    prevWeek := date.AddDate(0, 0, -7)
    return prevWeek.Format("2006-01-02")
}

func getNextWeek(dateStr string) string {
    date, _ := time.Parse("2006-01-02", dateStr)
    nextWeek := date.AddDate(0, 0, 7)
    return nextWeek.Format("2006-01-02")
}

func formatWeekRange(dateStr string) string {
    date, _ := time.Parse("2006-01-02", dateStr)
    weekStart := date.AddDate(0, 0, -int(date.Weekday()+6)%7) // Adjust to start on Monday
    weekEnd := weekStart.AddDate(0, 0, 6)
    // utils.LogInfo(fmt.Sprintf("Week range: %s - %s", weekStart, weekEnd))
    return weekStart.Format("Jan 2") + " - " + weekEnd.Format("Jan 2, 2006")
}

func getWeekNumber(dateStr string) string {
    if dateStr == "" {
        dateStr = time.Now().Format("2006-01-02")
    }
    date, _ := time.Parse("2006-01-02", dateStr)
    _, week := date.ISOWeek()
    return fmt.Sprintf("%d", week)
}
