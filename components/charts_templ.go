// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "time"
import "fmt"
import "github.com/twaananen/boulderlog/services"

func GradeCountsChart(gradeLabels []string, datasets map[string][]int, viewType string, dateStr string, showDateSelection bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"grade-counts-chart\" class=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg md:p-4 p-1\"><div class=\"flex justify-between items-center mb-4\"><span class=\"text-gray-800 dark:text-white font-bold\">Boulder Counts</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if showDateSelection {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex space-x-2\"><button class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs("/charts/grade-counts?view=all&date=" + dateStr)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 15, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#grade-counts-chart\" hx-swap=\"outerHTML\">All</button> <button class=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs("/charts/grade-counts?view=weekly&date=" + getPreviousWeek(dateStr))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 21, Col: 82}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#grade-counts-chart\" hx-swap=\"outerHTML\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"></path></svg></button> <button class=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs("/charts/grade-counts?view=weekly&date=" + dateStr)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 31, Col: 65}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#grade-counts-chart\" hx-swap=\"outerHTML\">Week ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(getWeekNumber(dateStr))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 34, Col: 35}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button> <button class=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs("/charts/grade-counts?view=weekly&date=" + getNextWeek(dateStr))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 37, Col: 78}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#grade-counts-chart\" hx-swap=\"outerHTML\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"></path></svg></button></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div class=\"max-h-[400px] min-h-[300px]\"><canvas id=\"gradeCountsChartCanvas\" data-labels=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(gradeLabels))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 49, Col: 91}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-datasets=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(datasets))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 49, Col: 136}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></canvas></div></div><script>\n        (function() {\n            const canvas = document.getElementById('gradeCountsChartCanvas');\n            const ctx = canvas.getContext('2d');\n            const labels = JSON.parse(canvas.dataset.labels);\n            const datasets = JSON.parse(canvas.dataset.datasets);\n\n            const isDarkMode = document.documentElement.classList.contains('dark');\n\n            const colors = {\n                Topped: { light: 'rgba(54, 162, 235, 0.8)', dark: 'rgba(54, 162, 235, 0.5)' },\n                Untopped: { light: 'rgba(255, 99, 132, 0.8)', dark: 'rgba(255, 99, 132, 0.5)' },\n                Flashed: { light: 'rgba(255, 165, 0, 0.8)', dark: 'rgba(255, 165, 0, 0.5)' },\n                New: { light: 'rgba(76, 175, 80, 0.8)', dark: 'rgba(76, 175, 80, 0.5)' }\n            };\n\n            const chartDatasets = Object.keys(datasets).map(key => ({\n                label: key,\n                data: datasets[key],\n                backgroundColor: isDarkMode ? colors[key].dark : colors[key].light,\n                borderColor: isDarkMode ? colors[key].dark.replace('0.5', '1') : colors[key].light.replace('0.8', '1'),\n                borderWidth: 1\n            }));\n\n            new Chart(ctx, {\n                type: 'bar',    \n                data: {\n                    labels: labels,\n                    datasets: chartDatasets\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: false,\n                                text: 'Count',\n                                color: isDarkMode ? '#fff' : '#333'\n                            },\n                            ticks: {\n                                color: isDarkMode ? '#fff' : '#333',\n                                stepSize: 1,\n                                precision: 0,\n                            },\n                            grid: {\n                                color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: false,\n                                text: 'Grade',\n                                color: isDarkMode ? '#fff' : '#333'\n                            },\n                            ticks: {\n                                color: isDarkMode ? '#fff' : '#333'\n                            },\n                            grid: {\n                                display: false\n                            },\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tmaxRotation: 90,\n\t\t\t\t\t\t\t\tminRotation: 0\n\t\t\t\t\t\t\t}\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: true,\n\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\tcolor: isDarkMode ? '#fff' : '#333'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tposition: 'bottom'\n                        },\n                        title: {\n                            display: false\n                        }\n                    }\n                }\n            });\n        })();\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func getPreviousWeek(dateStr string) string {
	date, _ := time.Parse("2006-01-02", dateStr)
	prevWeek := date.AddDate(0, 0, -7)
	return prevWeek.Format("2006-01-02")
}

func getNextWeek(dateStr string) string {
	date, _ := time.Parse("2006-01-02", dateStr)
	nextWeek := date.AddDate(0, 0, 7)
	return nextWeek.Format("2006-01-02")
}

func formatWeekRange(dateStr string) string {
	date, _ := time.Parse("2006-01-02", dateStr)
	weekStart := date.AddDate(0, 0, -int(date.Weekday()+6)%7) // Adjust to start on Monday
	weekEnd := weekStart.AddDate(0, 0, 6)
	// utils.LogInfo(fmt.Sprintf("Week range: %s - %s", weekStart, weekEnd))
	return weekStart.Format("Jan 2") + " - " + weekEnd.Format("Jan 2, 2006")
}

func getWeekNumber(dateStr string) string {
	if dateStr == "" {
		dateStr = time.Now().Format("2006-01-02")
	}
	date, _ := time.Parse("2006-01-02", dateStr)
	_, week := date.ISOWeek()
	return fmt.Sprintf("%d", week)
}

func DifficultyProgressionChart(data map[string][]services.DifficultyDataPoint, labels []string, currentPeriod string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"difficulty-progression-chart\" class=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg md:p-4 p-1\"><div class=\"flex justify-between items-center mb-4\"><span class=\"text-gray-800 dark:text-white font-bold\">Difficulty Over Time</span><div class=\"grid md:grid-cols-4 grid-cols-2 gap-2\"><label class=\"inline-flex items-center\"><input type=\"radio\" name=\"period\" value=\"day\" class=\"form-radio\" hx-get=\"/charts/difficulty-progression\" hx-target=\"#difficulty-progression-chart\" hx-swap=\"outerHTML\" hx-include=\"[name=&#39;period&#39;]\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentPeriod == "day" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <span class=\"ml-2\">Day</span></label> <label class=\"inline-flex items-center\"><input type=\"radio\" name=\"period\" value=\"week\" class=\"form-radio\" hx-get=\"/charts/difficulty-progression\" hx-target=\"#difficulty-progression-chart\" hx-swap=\"outerHTML\" hx-include=\"[name=&#39;period&#39;]\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentPeriod == "week" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <span class=\"ml-2\">Week</span></label> <label class=\"inline-flex items-center\"><input type=\"radio\" name=\"period\" value=\"month\" class=\"form-radio\" hx-get=\"/charts/difficulty-progression\" hx-target=\"#difficulty-progression-chart\" hx-swap=\"outerHTML\" hx-include=\"[name=&#39;period&#39;]\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentPeriod == "month" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <span class=\"ml-2\">Month</span></label> <label class=\"inline-flex items-center\"><input type=\"radio\" name=\"period\" value=\"year\" class=\"form-radio\" hx-get=\"/charts/difficulty-progression\" hx-target=\"#difficulty-progression-chart\" hx-swap=\"outerHTML\" hx-include=\"[name=&#39;period&#39;]\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentPeriod == "year" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> <span class=\"ml-2\">Year</span></label></div></div><div class=\"h-[600px]\"><canvas id=\"difficultyProgressionCanvas\" data-progression=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(data))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 211, Col: 85}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-labels=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(labels))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 211, Col: 126}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-period=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(currentPeriod)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts.templ`, Line: 211, Col: 156}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></canvas></div></div><script>\n\t\t(function() {\n\t\t\tconst canvas = document.getElementById('difficultyProgressionCanvas');\n\t\t\tconst ctx = canvas.getContext('2d');\n\t\t\tconst progressionData = JSON.parse(canvas.dataset.progression);\n\t\t\tconst grades = Object.keys(progressionData);\n\t\t\tconst labels = JSON.parse(canvas.dataset.labels);\n\t\t\tconst period = canvas.dataset.period;\n\n\t\t\tconst isDarkMode = document.documentElement.classList.contains('dark');\n\t\t\tconst textColor = isDarkMode ? '#fff' : '#333';\n\n\t\t\tconst datasets = grades.map((grade, index) => {\n\t\t\t\tconst values = progressionData[grade].map(point => point.Value);\n\t\t\t\tconst lastTwoValues = values.slice(-2);\n\t\t\t\tconst shouldHide = lastTwoValues.length === 2 && \n\t\t\t\t\tlastTwoValues.every(val => val === 1);\n\n\t\t\t\treturn {\n\t\t\t\t\tlabel: grade,\n\t\t\t\t\tdata: progressionData[grade].map(point => point.Value),\n\t\t\t\t\tborderColor: `hsl(${(index * 360 / grades.length) % 360}, 70%, 50%)`,\n\t\t\t\t\tbackgroundColor: `hsla(${(index * 360 / grades.length) % 360}, 70%, 50%, 0.2)`,\n\t\t\t\t\ttension: 0.3,\n\t\t\t\t\tpointRadius: 4,\n\t\t\t\t\tpointHoverRadius: 6,\n\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\thidden: shouldHide  // Set hidden based on the last two values\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tnew Chart(ctx, {\n\t\t\t\ttype: 'line',\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: datasets\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\tinteraction: {\n\t\t\t\t\t\tmode: 'nearest',\n\t\t\t\t\t\taxis: 'x',\n\t\t\t\t\t\tintersect: false\n\t\t\t\t\t},\n\t\t\t\t\tscales: {\n\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tcolor: textColor,\n\t\t\t\t\t\t\t\tmaxRotation: 45,\n\t\t\t\t\t\t\t\tminRotation: 45\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgrid: {\n\t\t\t\t\t\t\t\tcolor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\tmax: 8,\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tcolor: textColor,\n\t\t\t\t\t\t\t\tstepSize: 1,\n\t\t\t\t\t\t\t\tautoSkip: false,\n\t\t\t\t\t\t\t\tcallback: function(value) {\n\t\t\t\t\t\t\t\t\treturn Number.isInteger(value) ? value : value.toFixed(1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgrid: {\n\t\t\t\t\t\t\t\tcolor: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tplugins: {\n\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\tcolor: textColor,\n\t\t\t\t\t\t\t\tpadding: 20,\n\t\t\t\t\t\t\t\tusePointStyle: true,\n\t\t\t\t\t\t\t\tpointStyle: 'circle'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttooltip: {\n\t\t\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\t\t\tlabel: function(context) {\n\t\t\t\t\t\t\t\t\treturn `${context.dataset.label}: ${context.parsed.y.toFixed(1)}`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t})();\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
